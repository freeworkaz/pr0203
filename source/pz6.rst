Практическое занятие №6 Настройка систем обнаружения вторжений для обнаружения сетевых атак.
============================================================================================

Цель работы:
------------

#. Получить практический опыт применения программно-аппаратных средств обеспечения информационной безопасности телекоммуникационных систем;
#. Получить практический опыт выявления технических каналов утечки информации.

Литература:
-----------

#. Хорев, П.Б. Программно-аппаратная защита информации : учебное пособие для вузов / П.Б. Хорев. - Москва: ФОРУМ, стр 9-15.

Подготовка к работе:
--------------------

#. Подготовить бланк отчета;
#. Изучить предложенную литературу.

Основное оборудование:
----------------------

#. Компьютер под управлением ОС Windows Server 2008 R2;
#. Виртуальные машины в программе VirtualBox на основе Ubuntu Linux согласно заданию и схеме сети;
#. Модель простой сети и ресурсов простой сети;
#. Пакет GNS3 и комплект виртуальных машин, необходимых для схемы сети;
#. ОС Ubuntu Liunux с установленной СОВ Snort и настроенным интерфейсом.
#. Пакеты прикладных программ LibreOffice.

Задание:
--------

#. Выполнить настройку Snort для обнаружения сетевых атак.

Порядок выполнения работы:
--------------------------

#. Собрать модель простой сети и обеспечить ее работоспособность;
#. Выполнить подключение СОВ Snort в модель сети. Выполнить настройку интерфеса СОВ Snort;
#. Выполнить настройку СОВ Snort для обнаружения DOS и DDOS атак на web сервер. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;
#. Выполнить настройку СОВ Snort для обнаружения атак man in the middle. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;
#. Выполнить настройку СОВ Snort для обнаружения атак спуфинга различных протоколов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;
#. Выполнить настройку СОВ Snort для обнаружения атак спуфинга различных протоколов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;
#. Выполнить настройку СОВ Snort для обнаружения атак сканирования портов клиентов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;
#. Составить политику обеспение защаты от сетевых атак с использованием СОВ Snort.

Содержание отчета:
------------------

#. Цель работы;
#. Содержание действий по выполнению данной работы;
#. Ответы на контрольные вопросы;
#. Вывод.

Контрольные вопросы:
--------------------

#. Что понимают под сканированием портов?
#. Что понимают под атакой?
#. Какие сетевые атаки наиболее опасны в рамках предложенной модели?

Приложение:
-----------

DoS-атаки подразделяются на локальные и удаленные. К локальным относятся различные эксплойты, форк-бомбы и программы, открывающие по миллиону файлов или запускающие некий циклический алгоритм, который сжирает память и процессорные
ресурсы. На всем этом мы останавливаться не будем. Удаленные DoS-атаки делятся на два вида:

   * Удаленная эксплуатация ошибок в ПО с целью привести его в нерабочее состояние.
   * Flood — посылка на адрес жертвы огромного количества бессмысленных (реже – осмысленных) пакетов. Целью флуда может быть канал связи или ресурсы машины. В первом случае поток пакетов занимает весь пропускной канал и не     дает атакуемой машине возможность обрабатывать легальные запросы. Во втором — ресурсы машины захватываются с помощью многократного и очень частого обращения к какому-либо сервису, выполняющему сложную, ресурсоемкую     операцию. Это может быть, например, длительное обращение к одному из активных компонентов (скрипту) web-сервера. Сервер тратит все ресурсы машины на обработку запросов атакующего, а пользователям приходится ждать.

 Современные DoS-боты могут использовать все эти виды атак одновременно, поэтому следует заранее позаботиться об адекватной защите от каждой из них.

ICMP-флуд.
``````````

Очень примитивный метод забивания полосы пропускания и создания нагрузок на сетевой стек через монотонную посылку запросов ICMP ECHO (пинг). Легко обнаруживается с помощью анализа потоков трафика в обе стороны: во время атаки
типа ICMP-флуд они практически идентичны. Почти безболезненный способ абсолютной защиты основан на отключении ответов на запросы ICMP ECHO:

# sysctl net.ipv4.icmp_echo_ignore_all=1

Или с помощью брандмауэра:

# iptables -A INPUT -p icmp -j DROP --icmp-type 8

SYN-флуд.
`````````

Один из распространенных способов не только забить канал связи, но и ввести сетевой стек операционной системы в такое состояние, когда он уже не сможет принимать новые запросы на подключение. Основан на попытке инициализации большого числа одновременных TCP-соединений через посылку SYN-пакета с несуществующим обратным адресом. 
После нескольких попыток отослать ответный ACK-пакет на недоступный адрес большинство операционок ставят неустановленное соединение в очередь. И только после n-ой попытки закрывают соединение. Так как поток ACK-пакетов очень велик, вскоре очередь оказывается заполненной, и ядро дает отказ на попытки открыть новое соединение. Наиболее умные DoS-боты еще и анализируют систему перед началом атаки, чтобы слать запросы только на открытые жизненно важные порты. Идентифицировать такую атаку просто: достаточно попробовать подключиться к одному из сервисов. Оборонительные мероприятия обычно включают в себя:

* Увеличение очереди "полуоткрытых" TCP-соединений:

# sysctl -w net.ipv4.tcp_max_syn_backlog=1024

* Уменьшение времени удержания "полуоткрытых" соединений:

# sysctl -w net.ipv4.tcp_synack_retries=1

* Включение механизма TCP syncookies:

# sysctl -w net.ipv4.tcp_syncookies=1

* Ограничение максимального числа "полуоткрытых" соединений с одного IP к конкретному порту:

# iptables -I INPUT -p tcp --syn --dport 80 -m iplimit --iplimit-above 10 -j DROP

Наличие SYN-флуда устанавливается легко — через подсчет числа "полуоткрытых" TCP-соединений:

# netstat -na | grep ":80\ " | grep SYN_RCVD

В обычной ситуации их не должно быть совсем (или очень небольшое количество: максимум 1-3). Если это не так — то скорее всего атака уже началась.

UDP-флуд.
`````````

Типичный метод забивания полосы пропускания. Основан на бесконечной посылке UDP-пакетов на порты различных UDP-сервисов. Легко устраняется за счет отрезания таких сервисов от внешнего мира и установки лимита на количество соединений в единицу времени к DNS-серверу на стороне шлюза:

# iptables -I INPUT -p udp —dport 53 -j DROP -m iplimit —iplimit-above 1

HTTP-флуд.
``````````

Один из самых распространенных на сегодняшний день способов флуда. Основан на бесконечной посылке HTTP-сообщений GET на 80-ый порт с целью загрузить web-сервер настолько, чтобы он оказался не в состоянии обрабатывать все остальные запросы. Часто целью флуда становится не корень web-сервера, а один из скриптов, выполняющих ресурсоемкие задачи или работающий с базой данных. В любом случае, индикатором начавшейся атаки будет служить аномально быстрый рост логов web-сервера.
Методы борьбы с HTTP-флудом включают в себя настройку web-сервера и базы данных с целью снизить эффект от атаки, а также отсеивание DoS-ботов с помощью различных приемов. Во-первых, следует увеличить максимальное число коннектов к базе данных одновременно. Во-вторых, установить перед web-сервером Apache легкий и производительный nginx – он будет кэшировать запросы и отдавать статический контент, который apache может достаточно долго обрабатывать. Это решение из списка "must have", которое не только снизит эффект DoS-атак, но и позволит серверу выдержать огромные нагрузки. 

Небольшой пример:
::

# vi /etc/nginx/nginx.conf
# Увеличиваем максимальное количество используемых файлов
worker_rlimit_nofile 80000;
events {
# Увеличиваем максимальное количество соединений
worker_connections 65536;
# Использовать эффективный метод epoll для обработки соединений
use epoll;
}
http {
gzip off;
# Отключаем таймаут на закрытие keep-alive соединений
keepalive_timeout 0;
# Не отдавать версию nginx в заголовке ответа
server_tokens off;
# Сбрасывать соединение по таймауту
reset_timedout_connection on;
}
# Стандартные настройки для работы в качестве прокси
server {
listen 111.111.111.111 default deferred;
server_name host.com www.host.com;
log_format IP $remote_addr;
location / {
proxy_pass http://127.0.0.1/;
}
location ~* \.(jpeg|jpg|gif|png|css|js|pdf|txt|tar)$ {
root /home/www/host.com/httpdocs;
}
}

В случае необходимости можно задействовать nginx-модуль ngx_http_limit_req_module, ограничивающий количество одновременных подключений с одного адреса (http://sysoev.ru/nginx/docs/http/ngx_http_limit_req_module.html).
Ресурсоемкие скрипты можно защитить от ботов с помощью задержек, кнопок "Нажми меня", выставления кукисов и других приемов, направленных на проверку "человечности".

Чтобы проверить подозрительную активность на веб сервере Apache нужно подсчитать количество процессов Apache и количество коннектов на 80-ый порт (HTTP-флуд):

# ps aux | grep httpd | wc -l
# netstat -na | grep ":80\ " | wc -l

Интересуют значения, в несколько раз превышающие среднестатистические. Далее следует просмотреть список IP-адресов, с которых идут запросы на подключение:

# netstat -na | grep ":80\ " | sort | uniq -c | sort -nr | less

Однозначно идентифицировать DoS-атаку нельзя, можно лишь подтвердить свои догадки о наличии таковой, если один адрес повторяется в списке слишком много раз (да и то, это может говорить о посетителях, сидящих за NAT’ом). Показателем DOS атаки чаще всего служит большой поток однообразных (и не содержащих полезной информации) пакетов от разных IP, направленных на один порт/сервис (например, корень web-сервера или определенный cgi-скрипт).

Дополнительным подтверждением будет анализ пакетов с помощью tcpdump (или wireshark):

# tcpdump -n -i eth0 -s 0 -w output.txt dst port 80 and host IP-сервера

Окончательно определившись с началом атаки можно дропать неугодных по IP-адресам (будет гораздо больше эффекта, если  сделать это на маршрутизаторе):

# iptables -A INPUT -s xxx.xxx.xxx.xxx -p tcp --destination-port http -j DROP

Или сразу по подсетям:

# iptables -A INPUT -s xxx.xxx.0.0/16 -p tcp --destination-port http -j DROP

Это даст некоторую фору (совсем маленькую; зачастую IP-адрес источника спуфится), которую необходимо использовать для того, чтобы обратиться к провайдеру/хостеру (с приложенными к сообщению логами web-сервера, ядра, брандмауэра и списком выявленных IP-адресов). Несмотря на проблемы у большинства хостеров с защитой от DOS атак это следует сделать обязательно, – эффективная защита от DDoS (особенно направленных на канал связи) возможна только на магистральных каналах. 
 
Универсальные советы
````````````````````

Чтобы не попасть в безвыходное положение во время обрушения DDoS-шторма на системы, необходимо тщательным образом подготовить их к такой ситуации:

   * Все сервера, имеющие прямой доступ во внешнюю сеть, должны быть подготовлены к простому и быстрому удаленному ребуту (sshd спасет отца русской демократии). Большим плюсом будет наличие второго, административного, сетевого интерфейса, через который можно получить доступ к серверу в случае забитости основного канала.
   * ПО, используемое на сервере, всегда должно находиться в актуальном    состоянии. Все дырки — пропатчены, обновления установлены (простой, как    сапог, совет, которому многие не следуют). Это оградит тебя от DoS-атак,  эксплуатирующих баги в сервисах.
   * Все слушающие сетевые сервисы, предназначенные для административного    использования, должны быть спрятаны брандмауэром ото всех, кто не должен    иметь к ним доступ. Тогда атакующий не сможет использовать их для проведения  DoS-атаки или брутфорса.
   *  На подходах к серверу (ближайшем маршрутизаторе) должна быть установлена    система анализа трафика (NetFlow в помощь), которая позволит своевременно    узнать о начинающейся атаке и вовремя принять меры по ее предотвращению.

Добавить в /etc/sysctl.conf следующие строки:
::

# vi /etc/sysctl.conf
# Защита от спуфинга
net.ipv4.conf.default.rp_filter = 1
# Проверять TCP-соединение каждую минуту. Если на другой стороне - легальная
машина, она сразу ответит. Дефолтовое значение - 2 часа.
net.ipv4.tcp_keepalive_time = 60
# Повторить пробу через десять секунд
net.ipv4.tcp_keepalive_intvl = 10
# Количество проверок перед закрытием соединения
net.ipv4.tcp_keepalive_probes = 5

Следует отметить, что все приемы, приведенные в прошлом и этом разделах, направлены на снижение эффективности DDoS-атак, ставящих своей целью израсходовать ресурсы машины. От флуда, забивающего канал мусором, защититься практически невозможно, и единственно правильный, но не всегда осуществимый способ борьбы заключается в том, чтобы "лишить атаку смысла". 
Есть более изощренный способ защиты. Он основан на организации распределенной вычислительной сети, включающей в себя множество дублирующих серверов, которые подключены к разным магистральным каналам. Когда вычислительные мощности или пропускная способность канала заканчиваются, все новые клиенты перенаправляются на другой сервер (или же постепенно "размазываются" по серверам по принципу round-robin). Это невероятно дорогая, но очень стойкая структура, завалить которую практически нереально.
