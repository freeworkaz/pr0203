Практическое занятие №10 Настройка персональных межсетевых экранов.
===================================================================

Цель работы:
------------

#. Получить практический опыт применения программно-аппаратных средств обеспечения информационной безопасности телекоммуникационных систем;
#. Получить практический опыт выявления технических каналов утечки информации.

Литература:
-----------

#. Шаньгин, В. Ф. Информационная безопасность и защита информации [Электронный ресурс]: учебное пособие. - Москва: ДМК Пресс, 2014. -  Режим доступа: http://www.iprbookshop.ru/29257, по запросу, стр 446-447;

Подготовка к работе:
--------------------

#. Подготовить бланк отчета;
#. Изучить предложенную литературу.

Основное оборудование:
----------------------

#. Компьютер под управлением ОС Windows Server 2008 R2;
#. Виртуальные машины в программе VirtualBox на основе Ubuntu Linux согласно заданию и схеме сети;
#. Схема простой сети и ресурсов простой сети;
#. Программа Libreoffice для составления отчетов.

Задание:
--------

#. Выполнить настройку персонального МЭ в модели сети предприятия.

Порядок выполнения работы:
--------------------------

#. Собрать и настроить модель сети;
#. Выполнить настройку персональных межсетевых экранов на оконечных устройствах. В качестве основы для настройки придерживаться следующего алгоритма:
  * Для клиентов персональные МЭ обеспечивают защиту от угроз, исходящих от клиентов. К таким угрозам относятся: доступ к запрещенным ресурсам (odnoklassniki.ru, mail.ru, vk.com,m.vk.com и аналогичные), использование запрещенных протоколов (bittorrent, telnet, ftp и аналогичные) и портов этих протоколов;
  * Должны вестись журналы подключений, в которые записывается информация о срабатывании правил.
#. Для инфрастуртурных серверов персональные МЭ обеспечивают защиту от угроз, направленных к ресурсам и ответов на подобные запросы. К таким угрозам относятся: использование запрещенных протоколов (bittorrent, telnet, ftp и аналогичные) и портов этих протоколов.
  * Доступ к ресурсу для соединений (параметры: адрес, порт и протокол) должен быть реализован по т. н. «белому списку».
  * Должны вестись журналы подключений, в которые записывается информация о срабатывании правил.
#. По окончании настроек проверить срабатывание всех правил.
#. Составить политику, в которой описать роль персонвльного МЭ в системе межсетевого экранирования модели сети.

Содержание отчета:
------------------

#. Цель работы;
#. Содержание действий по выполнению данной работы;
#. Ответы на контрольные вопросы;
#. Вывод.

Контрольные вопросы:
--------------------

#. Как происходит логирование событий межсетевого экрана?
#. Как составить правило, которое блокирует сканирование TCP портов и одновременно фиксирует эту информацию в системном журнале операционной системы?
#. Как составить политику межсетевого экранирования с использованием фильтрации по т.н. «серому списку»?

Приложение:
-----------

В качестве примера лога правил рассмотрим правило которое разрешает пинги и логирует их:

iptables -A INPUT  -p ICMP -s 0/0 --icmp-type 8 -j LOG --log-prefix "Ping detected: "
iptables -A INPUT  -p ICMP -s 0/0 --icmp-type 8 -j ACCEPT

Теперь по событию подпадающее под это правило будет писаться такое сообщение в /var/log/messages и /var/log/syslog:

kernel: [122972.300408] Ping detected: IN=eth0 OUT= MAC=00:35:c9:36:7e:d1:00:24:5d:а6:c2:40:08:90 SRC=xxx.xxx.xxx.xxx DST=xxx.xxx.xxx.xxx LEN=60 TOS=0x00 PREC=0x00 TTL=124 ID=23020 PROTO=ICMP TYPE=8 CODE=0 ID=33602 SEQ=2462

Если попаданий в правила достаточно много, то невозможно проанализировать другие сообщения, т.к. сообщения iptables’а наводняют весь файл логов.

Для избежания вышеописанного необходимо изменить критерий в префиксе сообщения, например так:

iptables -A INPUT -p ICMP -s 0/0 --icmp-type 8 -j LOG --log-prefix "Iptables: Ping detected: "
iptables -A INPUT -p ICMP -s 0/0 --icmp-type 8 -j ACCEPT

И создать файл /etc/rsyslog.d/iptables.conf со следующим содержанием:

echo ':msg, contains, "Iptables: " -/var/log/iptables.log' > /etc/rsyslog.d/iptables.conf
echo '& ~' >> /etc/rsyslog.d/iptables.conf

Где:
    * параметр & ~ говорит о том что дальнейшую обработку записи производить не надо, следовательно она не попадет в другие файлы логов
    * "Iptables: " — log-prefix — критерий с которого начинается запись лога, чтобы rsyslog смог ее отловить и перенаправить в нужный файл. Его можно было и не менять, а оставить как есть Ping detected, но если правило не одно, то удобнее иметь общий префикс для всех правил, который и был сделан.
    * /var/log/iptables.log — файл в который писать лог

Перезапустить демон rsyslog:

/etc/init.d/rsyslog restart

Теперь сообщение в логе /var/log/iptables.log выглядит так:

kernel: [122972.300408] Iptables: Ping detected: IN=eth0 OUT= MAC=00:35:c9:36:7e:d1:00:24:5d:а6:c2:40:08:90 SRC=xxx.xxx.xxx.xxx DST=xxx.xxx.xxx.xxx LEN=60 TOS=0x00 PREC=0x00 TTL=124 ID=23020 PROTO=ICMP TYPE=8 CODE=0 ID=33602 SEQ=2462

Наконец iptables пишет в свой личный лог не трогая системные.

Можно пойти дальше, создав правила для разных событий и каждое событие направить в свой лог, например:
:: 

   # Логировать пакеты со статусом INVALID 
   $IPT -A INPUT -m state --state INVALID -j LOG --log-prefix "Iptables: Invalid packet: "
   # Логировать INPUT пакеты, которые не попали ни в одно правило
   $IPT -A INPUT -m limit --limit 3/minute --limit-burst 3 -j LOG --log-prefix "Iptables: INPUT packet died: "
   # Логировать FORWARD пакеты, которые не попали ни в одно правило
   $IPT -A FORWARD -m limit --limit 3/minute --limit-burst 3 -j LOG --log-prefix "Iptables: FORWARD packet died: "

Создать правила для ведения логирования каждого файла
::

   echo ':msg, contains, "Iptables: Invalid packet" -/var/log/iptables_invalid.log' > /etc/rsyslog.d/iptables_invalid.conf
   echo '& ~' >> /etc/rsyslog.d/iptables_invalid.conf
   echo ':msg, contains, "Iptables: INPUT" -/var/log/iptables_input.log' > /etc/rsyslog.d/iptables_input.conf
   echo '& ~' >> /etc/rsyslog.d/iptables_input.conf
   echo ':msg, contains, "Iptables: FORWARD" -/var/log/iptables_forward.log' > /etc/rsyslog.d/iptables_forward.conf
   echo '& ~' >> /etc/rsyslog.d/iptables_forward.conf

Перезапустить rsyslog:

/etc/init.d/rsyslog restart

При такой конфигурации лог iptables разделен на три части и каждая пишется в свой файл.

Настроить ротацию логов iptables можно создав файл /etc/logrotate.d/iptables со следующим содержимым. Для одного общего лога:
::

   /var/log/iptables.log {
    daily
    rotate 30
    compress
    missingok
    notifempty
    sharedscripts
    }

или для раздельных логов:
::

   /var/log/iptables_invalid.log {
    daily
    rotate 30
    compress
    missingok
    notifempty
   }
::
   
   /var/log/iptables_input.log {
    daily
    rotate 30
    compress
    missingok
    notifempty
   }
::

   /var/log/iptables_forward.log {
    daily
    rotate 30
    compress
    missingok
    notifempty
   }

Где
    * daily — ротировать ежедневно
    * rotate 30 — сохранять 30 последних ротированных файлов
    * compress — сжимать
    * missingok — отсутствие файла не является ошибкой
    * notifempty — не обрабатывать пустые файлы

Дабы убедиться в работоспособности, можно принудительно запустить ротацию:

logrotate -f /etc/logrotate.conf
