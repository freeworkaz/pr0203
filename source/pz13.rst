Практическое занятие №13 Моделирование работы межсетевых экранов в крупных сетях.
=================================================================================

Цель работы:
------------

#. Получить практический опыт применения программно-аппаратных средств обеспечения информационной безопасности телекоммуникационных систем;
#. Получить практический опыт выявления технических каналов утечки информации.

Литература:
-----------

#. Шаньгин, В. Ф. Информационная безопасность и защита информации [Электронный ресурс]: учебное пособие. - Москва: ДМК Пресс, 2014. -  Режим доступа: http://www.iprbookshop.ru/29257, по запросу, стр 552-556;

Подготовка к работе:
--------------------

#. Подготовить бланк отчета;
#. Изучить предложенную литературу.

Основное оборудование:
----------------------

#. Компьютер под управлением ОС Windows Server 2008 R2;
#. Программа Cisco Packet Tracer.

Задание:
--------

#. Выполнить конфигурирование МЭ в крупной сети с настройкой ACL в среде моделирования Cisco Packet Tracer.

Порядок выполнения работы:
--------------------------
#. Составить в Cisco Packet Tracer схему следующей сети:

.. figure:: _static/network_schema_ACL.png
       :scale: 100 %
       :align: center
       :alt: Схема сети для настройки ACL

       Рисунок 1 Схема сети для настройки ACL

#. Создать список ACL: 
  #. Войти в режим конфигурирования коммутатора или маршрутизатора;
  #. Для создания простого списка доступа необходимо выполнить команду #ip access-list standart 10. При этом создается стандартный список доступа под номером 10;
  #. Для создания простого списка доступа необходимо выполнить команду # ip access-list extended 100. При этом создается расширенный список доступа под номером 100;
#. Наполнить список правилами обработки трафика. В правилах задать протокол, порт и направление трафика. Каждое, правило в списке доступа сдержит три важных элемента: 
  #. Число, идентифицирующее список при обращении к нему в других частях конфигурации маршрутизатора или коммутатора третьего уровня;
  #. Инструкцию deny (запретить) или permit (разрешить); 
  #. Идентификатор пакета, который задается по одному из трех вариантов:адрес сети (например 192.168.2.0  0.0.0.255), адрес хоста (host 192.168.2.1) или любой IP адрес (any);
  #. Применить список доступа к интерфейсу устройства на вход или на выход этого интерфейса. Пример стандартного списка доступа №10: 
::

   access-list 10 deny host 11.0.0.5 access-list 10 deny 12.0.0.0  0.255.255.255 access-list 10 permit any 

В этом списке: 
  * запрещен весь трафик хосту с IP адресом 11.0.0.5; 
  * запрещен весь трафик в сети 12.0.0.0/8 (в правиле указывается не реальная маска подсети, а ее шаблон); - весь остальной трафик разрешен;
#. Реализовать указанный выше пример в созданной модели сети. Продемонстрировать результаты работы преподавателю;
#. Выполнить настройку фильтрации по «белому списку» адресов. Компьютеры comp1 и comp2 должны открывать все сайты, но им запрещено входить на компьютеры comp3 и comp4;
#. Выполнить настройку фильтрации по «черному списку» адресов. Компьютеры comp3 и comp4 доступны друг для друга и должны открывать только сайт своей сети, сеть 11.0.0.0 для них недоступна;
#. Продемонстрировать результаты работы преподавателю.

Содержание отчета:
------------------

#. Цель работы;
#. Содержание действий по выполнению данной работы;
#. Ответы на контрольные вопросы;
#. Вывод.

Контрольные вопросы:
--------------------

#. Как реализуется на практике методика сканирования портов?
#. Как реализуется на практике методика проведения DOS атак?
#. Какие существуют методы защиты от сканирования портов?

Приложение:
-----------

ACL (Access Control List) — это набор текстовых выражений, которые что-то разрешают, либо что-то запрещают. Обычно ACL разрешает или запрещает IP-пакеты, но помимо всего прочего он может заглядывать внутрь IP-пакета, просматривать тип пакета, TCP и UDP порты. Также ACL существует для различных сетевых протоколов (IP, IPX, AppleTalk и так далее). В основном применение списков доступа рассматривают с точки зрения пакетной фильтрации, то есть пакетная фильтрация необходима в тех ситуациях, когда у вас стоит оборудование на границе Интернет и вашей частной сети и нужно отфильтровать ненужный трафик.
Вы размещаете ACL на входящем направлении и блокируете избыточные виды трафика.

Теория
``````

Функционал ACL состоит в классификации трафика, нужно его проверить сначала, а потом что-то с ним сделать в зависимости от того, куда ACL применяется. ACL применяется везде, например:

    * На интерфейсе: пакетная фильтрация
    * На линии Telnet: ограничения доступа к маршрутизатору
    * VPN: какой трафик нужно шифровать
    * QoS: какой трафик обрабатывать приоритетнее
    * NAT: какие адреса транслировать


Для применения ACL для всех этих компонентов нужно понять как они работают. И мы в первую очередь будем касаться пакетной фильтрации. Применительно к пакетной фильтрации, ACL размещаются на интерфейсах, сами они создаются независимо, а уже потом они прикручиваются к интерфейсу. Как только вы его прикрутили к интерфейсу маршрутизатор начинает просматривать трафик. Маршрутизатор рассматривает трафик как входящий и исходящий. Тот трафик, который входит в маршрутизатор называется входящим, тот который из него выходит — исходящий. Соответственно ACL размещаются на входящем или на исходящем направлении.

.. figure:: _static/acl1.jpg
       :scale: 100 %
       :align: center
       :alt: Сеть с одним МЭ

       Рисунок 2 Сеть с одним МЭ
	   
Из вашей частной сети приходит пакет на интерфейс маршрутизатора fa0/1, маршрутизатор проверяет есть ли ACL на интерфейсе или нет, если он есть, то дальше обработка ведется по правилам списка доступа строго в том порядке, в котором записаны выражения, если список доступа разрешает проходить пакету, то в данном случае маршрутизатор отправляет пакет провайдеру через интерфейс fa0/0, если список доступа не разрешает проходить пакету, пакет уничтожается. Если списка доступа нет — пакет пролетает без всяких ограничений. Перед тем как отправить пакет провайдеру, маршрутизатор ещё проверяет интерфейс fa0/0 на наличие исходящего ACL. Дело в том, что ACL может быть прикреплен на интерфейсе как входящий или исходящий. К примеру у нас есть ACL с правилом запретить всем узлам в Интернете посылать в нашу сеть пакеты.
На какой интерфейс прикрепить данную ACL? 
Если мы прикрепим ACL на интерфейс fa0/1 как исходящий, это будет не совсем верно, хотя и ACL работать будет. На маршрутизатор приходит эхо-запрос для какого-то узла в частной сети, он проверяет на интерфейсе fa0/0 есть ли ACL, его нет, дальше проверяет интерфейс fa0/1, на данном интерфейсе есть ACL, он настроен как исходящий, всё верно пакет не проникает в сеть, а уничтожается маршрутизатором. Но если мы прикрепим ACL за интерфейсом fa0/0 как входящий, то пакет будет уничтожатся сразу как пришел на маршрутизатор. Последнее решение является правильным, так как маршрутизатор меньше нагружает свои вычислительные ресурсы. Расширенные ACL нужно размещать как можно ближе к источнику, стандартные же как можно ближе к получателю. Это нужно для того, чтобы не гонять пакеты по всей сети зря.

Сам же ACL представляет собой набор текстовых выражений, в которых написано permit (разрешить) либо deny (запретить), и обработка ведется строго в том порядке в котором заданы выражения. Соответственно когда пакет попадает на интерфейс он проверяется на первое условие, если первое условие совпадает с пакетом, дальнейшая его обработка прекращается. Пакет либо перейдет дальше, либо уничтожится.
Ещё раз, если пакет совпал с условием, дальше он не обрабатывается. Если первое условие не совпало, идет обработка второго условия, если оно совпало, обработка прекращается, если нет, идет обработка третьего условия и так дальше пока не проверятся все условия, если никакое из условий не совпадает, пакет просто уничтожается. Помните, в каждом конце списка стоит неявный deny any (запретить весь трафик). Будьте очень внимательны с этими правилами, которые я выделил, потому что очень часто происходят ошибки при конфигурации.

ACL разделяются на два типа:

    * Стандартные (Standard): могут проверять только адреса источников
    * Расширенные (Extended): могут проверять адреса источников, а также адреса получателей, в случае IP ещё тип протокола и TCP/UDP порты

Обозначаются списки доступа либо номерами, либо символьными именами. ACL также используются для разных сетевых протоколов. Мы в свою очередь будем работать с IP. Обозначаются они следующим образом, нумерованные списки доступа:

    * Стандартные: от 1 до 99
    * Расширенные: от 100 до 199

Символьные ACL разделяются тоже на стандартные и расширенные. Расширенные напомню могут проверять гораздо больше, нежели стандартные, но и работают они медленнее, так как придется заглядывать внутрь пакета, в отличии от стандартных где мы смотрим только поле Source Address (Адрес отправителя). При создании ACL каждая запись списка доступа обозначается порядковым номером, по умолчанию в рамках десяти (10, 20, 30 и т.д). Благодаря чему, можно удалить конкретную запись и на её место вставить другую, но эта возможность появилась в Cisco IOS 12.3, до 12.3 приходилось ACL удалять, а потом создать заново полностью. Нельзя разместить более 1 списка доступа на интерфейс, на протокол, на направление. Объясняю: если у нас есть маршрутизатор и у него есть интерфейс, мы можем на входящее направление для IP-протокола разместить только один список доступа, например под номером 10. Ещё одно правило, касающееся самих маршрутизаторов, ACL не действует на трафик, сгенерированный самим маршрутизатором.

Для фильтрации адресов в ACL используется WildCard-маска. Это обратная маска. Берем шаблонное выражение: 255.255.255.255 и отнимаем от шаблона обычную маску.
255.255.255.255-255.255.255.0, у нас получается маска 0.0.0.255, что является обычной маски 255.255.255.0, только 0.0.0.255 является WildCard маской.

Виды ACL
````````

Динамический (Dynamic ACL)
``````````````````````````

Позволяет сделать следующее, например у вас есть маршрутизатор, который подключен к какому-то серверу и нам нужно закрыть доступ к нему из внешнего мира, но в тоже время есть несколько человек, которые могут подключаться к серверу.
Мы настраиваем динамический список доступа, прикрепляем его на входящем направлении, а дальше людям, которым нужно подключиться, подключаться через Telnet к данному устройству, в результате динамический ACL открывает проход к серверу, и уже человек может зайти скажем через HTTP попасть на сервер. По умолчанию через 10 минут этот проход закрывается и пользователь вынужден ещё раз выполнить Telnet чтобы подключиться к устройству.

Рефлексивный (Reflexive ACL)
````````````````````````````

Здесь ситуация немножко отличается, когда узел в локальной сети отправляет TCP запрос в Интернет, у нас должен быть открытый проход, чтобы пришел TCP ответ для установки соединения. Если прохода не будет — мы не сможем установить соединение, и вот этим проходом могут воспользоваться злоумышленники, например проникнуть в сеть. Рефлексивные ACL работают таким образом, блокируется полностью доступ (deny any) но формируется ещё один специальный ACL, который может читать параметры пользовательских сессий, которые сгенерированны из локальной сети и для них открывать проход в deny any, в результате получается что из Интернета не смогут установить соединение. А на сессии сгенерированны из локальной сети будут приходить ответы.

Ограничение по времени (Time-based ACL)
```````````````````````````````````````

Обычный ACL, но с ограничением по времени, вы можете ввести специальное расписание, которое активирует ту или иную запись списка доступа. И сделать такой фокус, например пишем список доступа, в котором запрещаем HTTP-доступ в течении рабочего дня и вешаем его на интерфейс маршрутизатора, то есть, сотрудники предприятия пришли на работу, им закрывается HTTP-доступ, рабочий день закончился, HTTP-доступ открывается,
пожалуйста, если хотите — сидите в Интернете.

Настройка
`````````

Сами ACL создаются отдельно, то есть это просто некий список, который создается в глобальном конфиге, потом он присваивается к интерфейсу и только тогда он и начинает работать. Необходимо помнить некоторые моменты, для того, чтобы правильно настроить списки доступа:

    * Обработка ведется строго в том порядке, в котором записаны условия
    * Если пакет совпал с условием, дальше он не обрабатывается
    * В конце каждого списка доступа стоит неявный deny any (запретить всё)
    * Расширенные ACL нужно размещать как можно ближе к источнику, стандартные же как можно ближе к получателю
    * Нельзя разместить более 1 списка доступа на интерфейс, на протокол, на направление
    * ACL не действует на трафик, сгенерированный самим маршрутизатором
    * Для фильтрации адресов используется WildCard маска


Стандартный список доступа
``````````````````````````
::

    Router(config)#access-list <номер списка от 1 до 99> {permit | deny | remark} {address | any | host} [source-wildcard] [log]

    * permit: разрешить
    * deny: запретить
    * remark: комментарий о списке доступа
    * address: запрещаем или разрешаем сеть
    * any: разрешаем или запрещаем всё
    * host: разрешаем или запрещаем хосту
    * source-wildcard: WildCard маска сети
    * log: включаем логгирование пакеты проходящие через данную запись ACL


Расширенный список доступа
``````````````````````````
::
    Router(config)#access-list <номер списка от 100 до 199> {permit | deny | remark} protocol source [source-wildcard] [operator operand] [port <порт или название протокола> [established]

    * protocol source: какой протокол будем разрешать или закрывать (ICMP, TCP, UDP, IP, OSPF и т.д)
    * deny: запретить
    * operator:
    * A.B.C.D — адрес получателя
    * any — любой конечный хост
    * eq — только пакеты на этом порте
    * gt — только пакеты с большим номером порта
    * host — единственный конечный хост
    * lt — только пакеты с более низким номером порта
    * neq — только пакеты не на данном номере порта
    * range — диапазон портов
    * port: номер порта (TCP или UDP), можно указать имя
    * established: разрешаем прохождение TCP-сегментов, которые являются частью уже созданной TCP-сессии


Прикрепляем к интерфейсу
````````````````````````
::

   Router(config-if)#ip access-group <номер списка или имя ACL> {in | out}

    * in: входящее направление
    * out: исходящее направление


Именованные списки доступа
``````````````````````````
::

   Router(config)#ip access-list {standard | extended} {<номер ACL> | <имя ACL>}
   Router(config-ext-nacl)# {default | deny | exit | no | permit | remark}

   
    * standard: стандартный ACL
    * extended: расширенный ACL
    * default: установить команду в значение по умолчанию


Ограничение доступа к маршрутизатору
````````````````````````````````````
::

   R(config)#line vty 0 4 — переходим в режим настройки виртуальных линий.
   R(config-line)#password <пароль>
   R(config-line)#login
   R(config-line)#access-class 21 in — настраиваем логин и пароль, а также закрепляем список доступа с разрешенными IP-адресами.

Динамические списки доступа
```````````````````````````

Схема сети имеет следующую структуру

.. figure:: _static/acl2.png
       :scale: 100 %
       :align: center
       :alt: Сеть ACL2

       Рисунок 3 Схема сети для настройки динамических списков доступа
::

   R3(config)#username Student password 0 cisco — создаем пользователей для подключения через Telnet.
   R3(config)#access-list 101 permit tcp any host 10.2.2.2 eq telnet
   R3(config)#access-list 101 dynamic testlist timeout 15 permit ip 192.168.10.0 0.0.0.255 192.168.30.0 0.0.0.255 — разрешаем подключаться к серверу по Telnet всем узлам.
   R3(config)#interface serial 0/0/1
   R3(config-if)#ip access-group 101 in — закрепляем 101 ACL за интерфейсом в входящем направлении.
   R3(config)#line vty 0 4
   R3(config-line)#login local
   R3(config-line)#autocommand access-enable host timeout 5 — как только пользователь аутентифицируеться, сеть 192.168.30.0 будет доступна, через 5 минут бездействия сеанс закроется.

Рефлексивные списки доступа
```````````````````````````

Схема сети имеет следующую структуру

.. figure:: _static/acl3.png
       :scale: 100 %
       :align: center
       :alt: Сеть ACL3

       Рисунок 3 Схема сети для настройки рефлексивных списков доступа
::

   R2(config)#ip access-list extended OUTBOUNDFILTERS
   R2(config-ext-nacl)#permit tcp 192.168.0.0 0.0.255.255 any reflect TCPTRAFFIC
   R2(config-ext-nacl)#permit icmp 192.168.0.0 0.0.255.255 any reflect ICMPTRAFFIC — заставляем маршрутизатор отслеживать трафик, который инициировался изнутри.
   R2(config)#ip access-list extended INBOUNDFILTERS
   R2(config-ext-nacl)#evaluate TCPTRAFFIC
   R2(config-ext-nacl)#evaluate ICMPTRAFFIC — создаем входящую политику, которая требует, чтобы маршрутизатор проверял входящий трафик, чтобы видеть инициировался ли изнутри и связываем TCPTRAFFIC к INBOUNDFILTERS.
   R2(config)#interface serial 0/1/0
   R2(config-if)#ip access-group INBOUNDFILTERS in
   R2(config-if)#ip access-group OUTBOUNDFILTERS out — применяем входящий и исходящий ACL на интерфейс.

Ограничение по времени
``````````````````````

Схема сети имеет следующую структуру

.. figure:: _static/acl4.png
       :scale: 100 %
       :align: center
       :alt: Сеть ACL3

       Рисунок 4 Схема сети для настройки time-based списков доступа
::

   R1(config)#time-range EVERYOTHERDAY
   R1(config-time-range)#periodic Monday Wednesday Friday 8:00 to 17:00 — создаем список времени, в котором добавляем дни недели и время.
   R1(config)#access-list 101 permit tcp 192.168.10.0 0.0.0.255 any eq telnet time-range EVERYOTHERDAY — применяем time-range к ACL.
   R1(config)#interface s0/0/0
   R1(config-if)#ip access-group 101 out — закрепляем ACL за интерфейсом.

Поиск проблем
`````````````
::

   R#show access-lists {ACL номер | имя} — смотрим информацию о списке доступа.
   R#show access-lists — смотрим все списки доступа на маршрутизаторе.

Пример
::

   Router#show access-lists
   Extended IP access list nick
   permit ip host 172.168.1.1 host 10.0.0.5
   deny ip any any (16 match(es))
   Standard IP access list nick5
   permit 172.16.0.0 0.0.255.255

Мы видим что у нас есть два ACL (стандартный и расширенный) под названиями nick и nick5. Первый список разрешает хосту 172.16.1.1 обращаться по IP (это значит что разрешены все протоколы работающие поверх IP) к хосту 10.0.0.5. Весь остальной трафик запрещен показывает команда deny ip any any. Рядом с этим условием в нашем примере пишет (16 match(es)). Это показывает что 16 пакетов попали под это условие.
Второй ACL разрешает проходить трафик от любого источника в сети 172.16.0.0/16.