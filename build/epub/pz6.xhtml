<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">


<html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Практическое занятие №6 Настройка систем обнаружения вторжений для обнаружения сетевых атак.</title>
    
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Навигация</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.xhtml" title="Алфавитный указатель"
             accesskey="I">указатель</a></li>
        <li class="right" >
          <a href="pz7.xhtml" title="Практическое занятие №7 Составление политики безопасности предприятия с учетом работы систем обнаружения вторжений."
             accesskey="N">вперёд</a> |</li>
        <li class="right" >
          <a href="pz5.xhtml" title="Практическое занятие №5 Конфигурирование систем обнаружения вторжений."
             accesskey="P">назад</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.xhtml">Документация course0203 1</a> &#187;</li> 
      </ul>
    </div>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="o6">
<h1>Практическое занятие №6 Настройка систем обнаружения вторжений для обнаружения сетевых атак.</h1>
<div class="section" id="id1">
<h2>Цель работы:</h2>
<ol class="arabic simple">
<li>Получить практический опыт применения программно-аппаратных средств обеспечения информационной безопасности телекоммуникационных систем;</li>
<li>Получить практический опыт выявления технических каналов утечки информации.</li>
</ol>
</div>
<div class="section" id="id2">
<h2>Литература:</h2>
<ol class="arabic simple">
<li>Хорев, П.Б. Программно-аппаратная защита информации : учебное пособие для вузов / П.Б. Хорев. - Москва: ФОРУМ, стр 9-15.</li>
</ol>
</div>
<div class="section" id="id3">
<h2>Подготовка к работе:</h2>
<ol class="arabic simple">
<li>Подготовить бланк отчета;</li>
<li>Изучить предложенную литературу.</li>
</ol>
</div>
<div class="section" id="id4">
<h2>Основное оборудование:</h2>
<ol class="arabic simple">
<li>Компьютер под управлением ОС Windows Server 2008 R2;</li>
<li>Виртуальные машины в программе VirtualBox на основе Ubuntu Linux согласно заданию и схеме сети;</li>
<li>Модель простой сети и ресурсов простой сети;</li>
<li>Пакет GNS3 и комплект виртуальных машин, необходимых для схемы сети;</li>
<li>ОС Ubuntu Liunux с установленной СОВ Snort и настроенным интерфейсом.</li>
<li>Пакеты прикладных программ LibreOffice.</li>
</ol>
</div>
<div class="section" id="id5">
<h2>Задание:</h2>
<ol class="arabic simple">
<li>Выполнить настройку Snort для обнаружения сетевых атак.</li>
</ol>
</div>
<div class="section" id="id6">
<h2>Порядок выполнения работы:</h2>
<ol class="arabic simple">
<li>Собрать модель простой сети и обеспечить ее работоспособность;</li>
<li>Выполнить подключение СОВ Snort в модель сети. Выполнить настройку интерфеса СОВ Snort;</li>
<li>Выполнить настройку СОВ Snort для обнаружения DOS и DDOS атак на web сервер. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;</li>
<li>Выполнить настройку СОВ Snort для обнаружения атак man in the middle. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;</li>
<li>Выполнить настройку СОВ Snort для обнаружения атак спуфинга различных протоколов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;</li>
<li>Выполнить настройку СОВ Snort для обнаружения атак спуфинга различных протоколов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;</li>
<li>Выполнить настройку СОВ Snort для обнаружения атак сканирования портов клиентов. Для этого составить небходимый набор сигнатур. Выполнить тестирование сигнатур и настроить механизм оповещения пользоватедя о срабатывании сигнатуры;</li>
<li>Составить политику обеспение защаты от сетевых атак с использованием СОВ Snort.</li>
</ol>
</div>
<div class="section" id="id7">
<h2>Содержание отчета:</h2>
<ol class="arabic simple">
<li>Цель работы;</li>
<li>Содержание действий по выполнению данной работы;</li>
<li>Ответы на контрольные вопросы;</li>
<li>Вывод.</li>
</ol>
</div>
<div class="section" id="id8">
<h2>Контрольные вопросы:</h2>
<ol class="arabic simple">
<li>Что понимают под сканированием портов?</li>
<li>Что понимают под атакой?</li>
<li>Какие сетевые атаки наиболее опасны в рамках предложенной модели?</li>
</ol>
</div>
<div class="section" id="id9">
<h2>Приложение:</h2>
<p>DoS-атаки подразделяются на локальные и удаленные. К локальным относятся различные эксплойты, форк-бомбы и программы, открывающие по миллиону файлов или запускающие некий циклический алгоритм, который сжирает память и процессорные
ресурсы. На всем этом мы останавливаться не будем. Удаленные DoS-атаки делятся на два вида:</p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li>Удаленная эксплуатация ошибок в ПО с целью привести его в нерабочее состояние.</li>
<li>Flood — посылка на адрес жертвы огромного количества бессмысленных (реже – осмысленных) пакетов. Целью флуда может быть канал связи или ресурсы машины. В первом случае поток пакетов занимает весь пропускной канал и не     дает атакуемой машине возможность обрабатывать легальные запросы. Во втором — ресурсы машины захватываются с помощью многократного и очень частого обращения к какому-либо сервису, выполняющему сложную, ресурсоемкую     операцию. Это может быть, например, длительное обращение к одному из активных компонентов (скрипту) web-сервера. Сервер тратит все ресурсы машины на обработку запросов атакующего, а пользователям приходится ждать.</li>
</ul>
</div></blockquote>
<p>Современные DoS-боты могут использовать все эти виды атак одновременно, поэтому следует заранее позаботиться об адекватной защите от каждой из них.</p>
</div></blockquote>
<div class="section" id="icmp">
<h3>ICMP-флуд.</h3>
<p>Очень примитивный метод забивания полосы пропускания и создания нагрузок на сетевой стек через монотонную посылку запросов ICMP ECHO (пинг). Легко обнаруживается с помощью анализа потоков трафика в обе стороны: во время атаки
типа ICMP-флуд они практически идентичны. Почти безболезненный способ абсолютной защиты основан на отключении ответов на запросы ICMP ECHO:</p>
<p># sysctl net.ipv4.icmp_echo_ignore_all=1</p>
<p>Или с помощью брандмауэра:</p>
<p># iptables -A INPUT -p icmp -j DROP &#8211;icmp-type 8</p>
</div>
<div class="section" id="syn">
<h3>SYN-флуд.</h3>
<p>Один из распространенных способов не только забить канал связи, но и ввести сетевой стек операционной системы в такое состояние, когда он уже не сможет принимать новые запросы на подключение. Основан на попытке инициализации большого числа одновременных TCP-соединений через посылку SYN-пакета с несуществующим обратным адресом.
После нескольких попыток отослать ответный ACK-пакет на недоступный адрес большинство операционок ставят неустановленное соединение в очередь. И только после n-ой попытки закрывают соединение. Так как поток ACK-пакетов очень велик, вскоре очередь оказывается заполненной, и ядро дает отказ на попытки открыть новое соединение. Наиболее умные DoS-боты еще и анализируют систему перед началом атаки, чтобы слать запросы только на открытые жизненно важные порты. Идентифицировать такую атаку просто: достаточно попробовать подключиться к одному из сервисов. Оборонительные мероприятия обычно включают в себя:</p>
<ul class="simple">
<li>Увеличение очереди &#8220;полуоткрытых&#8221; TCP-соединений:</li>
</ul>
<p># sysctl -w net.ipv4.tcp_max_syn_backlog=1024</p>
<ul class="simple">
<li>Уменьшение времени удержания &#8220;полуоткрытых&#8221; соединений:</li>
</ul>
<p># sysctl -w net.ipv4.tcp_synack_retries=1</p>
<ul class="simple">
<li>Включение механизма TCP syncookies:</li>
</ul>
<p># sysctl -w net.ipv4.tcp_syncookies=1</p>
<ul class="simple">
<li>Ограничение максимального числа &#8220;полуоткрытых&#8221; соединений с одного IP к конкретному порту:</li>
</ul>
<p># iptables -I INPUT -p tcp &#8211;syn &#8211;dport 80 -m iplimit &#8211;iplimit-above 10 -j DROP</p>
<p>Наличие SYN-флуда устанавливается легко — через подсчет числа &#8220;полуоткрытых&#8221; TCP-соединений:</p>
<p># netstat -na | grep &#8221;:80&#8221; | grep SYN_RCVD</p>
<p>В обычной ситуации их не должно быть совсем (или очень небольшое количество: максимум 1-3). Если это не так — то скорее всего атака уже началась.</p>
</div>
<div class="section" id="udp">
<h3>UDP-флуд.</h3>
<p>Типичный метод забивания полосы пропускания. Основан на бесконечной посылке UDP-пакетов на порты различных UDP-сервисов. Легко устраняется за счет отрезания таких сервисов от внешнего мира и установки лимита на количество соединений в единицу времени к DNS-серверу на стороне шлюза:</p>
<p># iptables -I INPUT -p udp —dport 53 -j DROP -m iplimit —iplimit-above 1</p>
</div>
<div class="section" id="http">
<h3>HTTP-флуд.</h3>
<p>Один из самых распространенных на сегодняшний день способов флуда. Основан на бесконечной посылке HTTP-сообщений GET на 80-ый порт с целью загрузить web-сервер настолько, чтобы он оказался не в состоянии обрабатывать все остальные запросы. Часто целью флуда становится не корень web-сервера, а один из скриптов, выполняющих ресурсоемкие задачи или работающий с базой данных. В любом случае, индикатором начавшейся атаки будет служить аномально быстрый рост логов web-сервера.
Методы борьбы с HTTP-флудом включают в себя настройку web-сервера и базы данных с целью снизить эффект от атаки, а также отсеивание DoS-ботов с помощью различных приемов. Во-первых, следует увеличить максимальное число коннектов к базе данных одновременно. Во-вторых, установить перед web-сервером Apache легкий и производительный nginx – он будет кэшировать запросы и отдавать статический контент, который apache может достаточно долго обрабатывать. Это решение из списка &#8220;must have&#8221;, которое не только снизит эффект DoS-атак, но и позволит серверу выдержать огромные нагрузки.</p>
<p>Небольшой пример:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># vi /etc/nginx/nginx.conf</span>
<span class="c1"># Увеличиваем максимальное количество используемых файлов</span>
</pre></div>
</div>
<p>worker_rlimit_nofile 80000;
events {
# Увеличиваем максимальное количество соединений
worker_connections 65536;
# Использовать эффективный метод epoll для обработки соединений
use epoll;
}
http {
gzip off;
# Отключаем таймаут на закрытие keep-alive соединений
keepalive_timeout 0;
# Не отдавать версию nginx в заголовке ответа
server_tokens off;
# Сбрасывать соединение по таймауту
reset_timedout_connection on;
}
# Стандартные настройки для работы в качестве прокси
server {
listen 111.111.111.111 default deferred;
server_name host.com www.host.com;
log_format IP $remote_addr;
location / {
proxy_pass <a class="reference external" href="http://127.0.0.1/">http://127.0.0.1/</a>;
}
location ~* .(jpeg|jpg|gif|png|css|js|pdf|txt|tar)$ {
root /home/www/host.com/httpdocs;
}
}</p>
<p>В случае необходимости можно задействовать nginx-модуль ngx_http_limit_req_module, ограничивающий количество одновременных подключений с одного адреса (<a class="reference external" href="http://sysoev.ru/nginx/docs/http/ngx_http_limit_req_module.html">http://sysoev.ru/nginx/docs/http/ngx_http_limit_req_module.html</a>).
Ресурсоемкие скрипты можно защитить от ботов с помощью задержек, кнопок &#8220;Нажми меня&#8221;, выставления кукисов и других приемов, направленных на проверку &#8220;человечности&#8221;.</p>
<p>Чтобы проверить подозрительную активность на веб сервере Apache нужно подсчитать количество процессов Apache и количество коннектов на 80-ый порт (HTTP-флуд):</p>
<p># ps aux | grep httpd | wc -l
# netstat -na | grep &#8221;:80&#8221; | wc -l</p>
<p>Интересуют значения, в несколько раз превышающие среднестатистические. Далее следует просмотреть список IP-адресов, с которых идут запросы на подключение:</p>
<p># netstat -na | grep &#8221;:80&#8221; | sort | uniq -c | sort -nr | less</p>
<p>Однозначно идентифицировать DoS-атаку нельзя, можно лишь подтвердить свои догадки о наличии таковой, если один адрес повторяется в списке слишком много раз (да и то, это может говорить о посетителях, сидящих за NAT’ом). Показателем DOS атаки чаще всего служит большой поток однообразных (и не содержащих полезной информации) пакетов от разных IP, направленных на один порт/сервис (например, корень web-сервера или определенный cgi-скрипт).</p>
<p>Дополнительным подтверждением будет анализ пакетов с помощью tcpdump (или wireshark):</p>
<p># tcpdump -n -i eth0 -s 0 -w output.txt dst port 80 and host IP-сервера</p>
<p>Окончательно определившись с началом атаки можно дропать неугодных по IP-адресам (будет гораздо больше эффекта, если  сделать это на маршрутизаторе):</p>
<p># iptables -A INPUT -s xxx.xxx.xxx.xxx -p tcp &#8211;destination-port http -j DROP</p>
<p>Или сразу по подсетям:</p>
<p># iptables -A INPUT -s xxx.xxx.0.0/16 -p tcp &#8211;destination-port http -j DROP</p>
<p>Это даст некоторую фору (совсем маленькую; зачастую IP-адрес источника спуфится), которую необходимо использовать для того, чтобы обратиться к провайдеру/хостеру (с приложенными к сообщению логами web-сервера, ядра, брандмауэра и списком выявленных IP-адресов). Несмотря на проблемы у большинства хостеров с защитой от DOS атак это следует сделать обязательно, – эффективная защита от DDoS (особенно направленных на канал связи) возможна только на магистральных каналах.</p>
</div>
<div class="section" id="id10">
<h3>Универсальные советы</h3>
<p>Чтобы не попасть в безвыходное положение во время обрушения DDoS-шторма на системы, необходимо тщательным образом подготовить их к такой ситуации:</p>
<blockquote>
<div><ul class="simple">
<li>Все сервера, имеющие прямой доступ во внешнюю сеть, должны быть подготовлены к простому и быстрому удаленному ребуту (sshd спасет отца русской демократии). Большим плюсом будет наличие второго, административного, сетевого интерфейса, через который можно получить доступ к серверу в случае забитости основного канала.</li>
<li>ПО, используемое на сервере, всегда должно находиться в актуальном    состоянии. Все дырки — пропатчены, обновления установлены (простой, как    сапог, совет, которому многие не следуют). Это оградит тебя от DoS-атак,  эксплуатирующих баги в сервисах.</li>
<li>Все слушающие сетевые сервисы, предназначенные для административного    использования, должны быть спрятаны брандмауэром ото всех, кто не должен    иметь к ним доступ. Тогда атакующий не сможет использовать их для проведения  DoS-атаки или брутфорса.</li>
<li>На подходах к серверу (ближайшем маршрутизаторе) должна быть установлена    система анализа трафика (NetFlow в помощь), которая позволит своевременно    узнать о начинающейся атаке и вовремя принять меры по ее предотвращению.</li>
</ul>
</div></blockquote>
<p>Добавить в /etc/sysctl.conf следующие строки:</p>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1"># vi /etc/sysctl.conf</span>
<span class="c1"># Защита от спуфинга</span>
</pre></div>
</div>
<p>net.ipv4.conf.default.rp_filter = 1
# Проверять TCP-соединение каждую минуту. Если на другой стороне - легальная
машина, она сразу ответит. Дефолтовое значение - 2 часа.
net.ipv4.tcp_keepalive_time = 60
# Повторить пробу через десять секунд
net.ipv4.tcp_keepalive_intvl = 10
# Количество проверок перед закрытием соединения
net.ipv4.tcp_keepalive_probes = 5</p>
<p>Следует отметить, что все приемы, приведенные в прошлом и этом разделах, направлены на снижение эффективности DDoS-атак, ставящих своей целью израсходовать ресурсы машины. От флуда, забивающего канал мусором, защититься практически невозможно, и единственно правильный, но не всегда осуществимый способ борьбы заключается в том, чтобы &#8220;лишить атаку смысла&#8221;.
Есть более изощренный способ защиты. Он основан на организации распределенной вычислительной сети, включающей в себя множество дублирующих серверов, которые подключены к разным магистральным каналам. Когда вычислительные мощности или пропускная способность канала заканчиваются, все новые клиенты перенаправляются на другой сервер (или же постепенно &#8220;размазываются&#8221; по серверам по принципу round-robin). Это невероятно дорогая, но очень стойкая структура, завалить которую практически нереально.</p>
</div>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>

    <div class="footer" role="contentinfo">
        &#169; Copyright 2016, Vladimir Dushkevich.
      Создано с помощью <a href="http://sphinx-doc.org/">Sphinx</a> 1.4.8.
    </div>
  </body>
</html>