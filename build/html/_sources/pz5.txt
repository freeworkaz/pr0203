Практическое занятие №5 Конфигурирование систем обнаружения вторжений.
======================================================================

Цель работы:
------------

#. Получить практический опыт применения программно-аппаратных средств обеспечения информационной безопасности телекоммуникационных систем;
#. Получить практический опыт выявления технических каналов утечки информации.

Литература:
-----------

#. Хорев, П.Б. Программно-аппаратная защита информации : учебное пособие для вузов / П.Б. Хорев. - Москва: ФОРУМ, стр 141-151.

Подготовка к работе:
--------------------

#. Подготовить бланк отчета;
#. Изучить предложенную литературу.

Основное оборудование:
----------------------

#. Компьютер под управлением ОС Windows Server 2008 R2;
#. Виртуальные машины в программе VirtualBox на основе Ubuntu Linux согласно заданию и схеме сети;
#. Тестовый web сервер на базе Ubuntu Linux;
#. Схема простой сети и ресурсов простой сети;
#. Пакет GNS3 и комплект виртуальных машин, необходимых для схемы сети;
#. Пакеты прикладных программ LibreOffice.

Задание:
--------

#. Выполнить настройку СОВ Snort для обнаружения сетевых вторжений.

Порядок выполнения работы:
--------------------------

#. Собрать схему простой сети по индивидуальному заданию и обеспечить ее работоспособность;
#. Выполнить загрузку и установку компонентов СОВ Snort на тестовую виртуальную машину;
#. Выполнить установку и настройку web интерфейса для СОВ Snort;
#. Выделить в сети сегмент DMZ и вынести в него один из серверов схемы сети. Настроить Snort так, чтобы обеспечить фильтрацию траффика в режие IPS по «белому» списку для данного сегмента сети. После проверки вынести ключевые ресурсы сети в DMZ. Настроить доступ к DMZ через Snort таким образом, чтобы трафик обрабатывался правилами Snort.
#. Выполнить настройку Snort для работы по анализу передаваемого контента от клиентов к серверу. При передаче определенной информации (например, логина и пароля) должно срабатывать правило а результат правила фиксироваться в системном журнале и отображаться в web интерфейсе.
#. Выполнть настройку Snort для работы по анализу нестандартных протоколов и инкапсулированных данных. При обнаружении инкапсуляции данных должно срабатывать правило а результат правила фиксироваться в системном журнале и отображаться в web интерфейсе.
#. Выполнить настройку Snort для работы по обнаружению несанкционированного доступа к серверу. При обнаружении несанкционированного доступа должно срабатывать правило а результат правила фиксироваться в системном журнале и отображаться в web интерфейсе.
#. Составить политику настройки СОВ в модели сети. Политику оформить в виде документа и предоставить преподавателю.

Содержание отчета:
------------------

#. Цель работы;
#. Содержание действий по выполнению данной работы;
#. Ответы на контрольные вопросы;
#. Вывод.

Контрольные вопросы:
--------------------

#. Что понимают под инкапсуляцией данных в сетевой пакет?
#. По каким критериям осуществляется фильтрация несанкционарованного доступа?
#. Каковы особенности оценки уязвимостей с использованием методологии CVSS?

Приложение:
-----------

Пакет, который будет использован для тестирования работы Snort можно сгенерировать при помощи программы scapy (от пользователя root). Данный пакет содержит три уровня: IP заголовок, UDP заголовок и полезная нагрузка (payload). Указанные данные мо1жножно сгенерировать при помощи следующих команд: 

root@myhost:~#sudo scapy
Welcome to Scapy (2.0.1)
>>>i=IP(dst="192.168.1.103")
>>>u=UDP(dport=1234)
>>>pay="evil payload"
>>>packet=i/u/pay
>>>send(pay)

Сокращённый вариант самого минимального конфига, который решает задачу настройки Snort в режиме IPS в общем виде выглядит так:
::

# Пункт 1: Глобальные переменные для конфига
#Используются в кофиге и правилах
var HOME_NET any
var RULE_PATH ../rules
# Пункт 2: настройка декодеров
config disable_decode_alerts
……
# Пункт 3: настройка детектора
# Разные тонкости применения правил
config pcre_match_limit: 3500
……
# Пункт 5: Настройка препроцессоров
# Препроцессоры нормализации пакетов
# нормализуют протоколы на лету, от чего,иногда, случаются неожиданности
preprocessor normalize_ip4
….
# Препроцессор обработки дефрагментированых пакетов
preprocessor frag3_global: max_frags 65536
…
# Препроцессоры контроля состояний и построения сеансов
preprocessor stream5_global: max_tcp 8192, track_tcp yes, track_udp ….
…
# Пункт 6: подключение библиотек детализации вывода
include classification.config
…..
# Пункт 7: подключение правил
include $RULE_PATH/test.rules

Для простоты в файле test.rules у нас будет только одно правило:

reject udp any any -> $HOME_NET 1234 (msg: "EVIL payload"; flow:to_server; content:"evil"; nocase; sid:1234567;)

Это правило говорит, что в случае обнаружения во входящих udp пакетах подстроки EVIL payload, то источнику немедленно будет послан RST, и сеанс будет прерван. Опасный пакет дальше IPS в систему не попадёт. Запускаем SNORT:
::

# snort -Q --daq nfq --daq-var queue=2 -c /home/ubuntu/Downloads/snort/etc/snort.conf -l /var/log/snort -A full

-Q – работа в режиме IPS
--daq – источника пакетов
--daq-var – параметры источника пакетов
-с – путь к конфигу
-l – путь к логам
-A full – подробные логи (описание атак и дампы трафика)
-D – работа в режиме демона ( использовать, когда всё отлажено)

Если запуск произошел с ошибками, то чаще всего нужно подправить пути к файлам в конфиге.

Пакетный фильтр системы можно настроить так, чтоб он передавал полученный пакет с уровня ядра на уровень пользователя, где пользовательская программа будет обрабатывать его и передавать обратно на уровень ядра, в нашем случае эта программа — SNORT. Так как SNORT у нас запущен для работы с нумерованнной очередью (NFQUEUE), то нам необходимо фильтруемый трафик в эту очередь поставить:
::

# iptables -t nat -A PREROUTING -p tcp --dport 8080 -j NFQUEUE --queue-num 2

В модели Iptables пакет попадает в базовую очередь PREROUTING до того, как к нему будут применены какие-либо правила маршрутизации. Отправка пакета в SNORT на этом этапе удобна тем, что далее мы можем его либо обрабатывать локально, либо переслать его дальше, например, используя NAT. Плюсом использования нумерованных очередей является то, что очередей можно создать несколько и трафик каждой очереди пропустить через снорт, запущенный с набором правил, заточенным под фильтруемый трафик. Серьёзным минусом такого подхода является то, что в случае падения SNORT, защищаемый сервис становится недоступен, так как передавать данные из режима пользователя назад в ядро становится некому. После запуска SNORT и создания очереди следует сразу же проверить работу, послав, например через netcat, в очередь сигнатуру из правила – abc123. Если всё было сделано правильно, то соединение будет немедленно разорвано.

Запущенный с описанными параметрами SNORT будет для каждой выявленной угрозы писать в alert файл (так же он может писать в базу или отправлять syslog):

[**] [1:310:1] Test pattern for snort abc123 [**]
[Classification: Executable Code was Detected] [Priority: 1]
01/19-12:03:12.155213136 172.16.249.1:56473 -> 172.16.249.130:8080
TCP TTL:64 TOS:0x0 ID:1241 IpLen:20 DgmLen:59 DF
***AP*** Seq: 0x9510F391 Ack: 0xC40C0E14 Win: 0x8218 TcpLen: 32
TCP Options (3) => NOP NOP TS: 125531844 9470333 